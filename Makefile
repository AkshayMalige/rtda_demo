############################################################################
#  project_root/Makefile  ‚îÄ  umbrella build for AIE / PL / HOST / HW_LINK
#TARGET = sw_emu | hw_emu | hw
#EMU_PS = X86 | QEMU
############################################################################

######################## ‚ñ∂ User-specific paths ‚óÄ ###########################
XILINX_VITIS  ?= /tools/Xilinx/2025.1/Vitis
PLATFORM  ?= xilinx_vek280_base_202510_1
EDGE_COMMON_SW ?= /home/synthara/versal_common/xilinx-versal-common-v2024.2
IMAGE     ?= $(EDGE_COMMON_SW)/Image
ROOTFS    ?= $(EDGE_COMMON_SW)/rootfs.ext4
###########################################################################

##################### Build-time variables / defaults ######################
TARGET    ?= sw_emu
# Default to native host builds unless user opts into QEMU
EMU_PS    ?= QEMU
PACK_CFG  := ./pack.cfg
###########################################################################

######################  Artefacts generated by sub-trees  ##################
# XO_DIR    := pl/build_$(TARGET)
# XO_FILES  := $(wildcard $(XO_DIR)/*.xo)
# Allow overriding the AIE work directory name used under aieml/
AIE_WORK_DIR_NAME ?= Work
AIE_LIB   := aieml/$(AIE_WORK_DIR_NAME)/libadf.a
XSA       := hw_link/design_$(TARGET).xsa
EXEC      := host/system_host
PKG_DIR   := package.$(TARGET)
XCLBIN    := $(PKG_DIR)/system_$(TARGET).xclbin
###########################################################################

# Common sub-make options
SUBOPTS := TARGET=$(TARGET) EMU_PS=$(EMU_PS) PLATFORM=$(PLATFORM)

# Ensure host builds natively for sw_emu to match host/Makefile defaults
# and avoid unintended cross-compilation when EMU_PS=QEMU is set globally.
HOST_SUBOPTS := TARGET=$(TARGET) PLATFORM=$(PLATFORM)
ifeq ($(TARGET),$(filter $(TARGET),hw_emu hw))
  HOST_SUBOPTS += EMU_PS=QEMU
else
  HOST_SUBOPTS += EMU_PS=X86
endif

#########################  AIE target mapping  #############################
# Map top-level TARGET to AIE graph TARGET expected by aieml/Makefile
#  - x86, x86sim, sw_emu  -> x86sim
#  - hw, hw_emu           -> hw
ifeq ($(TARGET),x86)
  AIE_TARGET := x86sim
else ifeq ($(TARGET),x86sim)
  AIE_TARGET := x86sim
else ifeq ($(TARGET),sw_emu)
  AIE_TARGET := x86sim
else
  AIE_TARGET := hw
endif

############################################################################
#  Top-level targets
############################################################################
.PHONY: all aie sim pl host hw_link link package run clean clean_all help
all: check_args aie pl host hw_link link package

# AIE graph build (delegates to aieml/)
aie:
	$(MAKE) -C aieml TARGET=$(AIE_TARGET) PLATFORM=$(PLATFORM) WORK_DIR=$(AIE_WORK_DIR_NAME)

# Simulation convenience wrapper (AIE-only)
sim:
	@echo "‚ñ∂ AIE sim with TARGET=$(AIE_TARGET) (from TARGET=$(TARGET))"
	$(MAKE) -C aieml sim TARGET=$(AIE_TARGET) PLATFORM=$(PLATFORM) WORK_DIR=$(AIE_WORK_DIR_NAME)

# Placeholders for PL kernels and host app (left as-is)
# pl:       ; $(MAKE) -C pl       $(SUBOPTS)
host:     ; $(MAKE) -C host     $(HOST_SUBOPTS)
hw_link:  ; $(MAKE) -C hw_link  $(SUBOPTS)
link:     ; @echo "üì¶ Link complete: $(XSA)"

########################  v++ --package flags ##############################
PKG_COMMON = --platform $(PLATFORM) --package.out_dir $(PKG_DIR) \
             --package.defer_aie_run --package.sd_file $(EXEC)

ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),X86)
    PKG_FLAGS = -t sw_emu
  else
    PKG_FLAGS = -t sw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
  endif
else ifeq ($(TARGET),hw_emu)
  PKG_FLAGS = -t hw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
else
  PKG_FLAGS = -t hw \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --package.boot_mode sd \
      --config $(PACK_CFG)
endif

##############################  Package  ###################################
package: $(XCLBIN)

# $(XCLBIN): $(XO_FILES) $(AIE_LIB) $(XSA) | $(PKG_DIR)
$(XCLBIN): $(AIE_LIB) $(XSA) | $(PKG_DIR)
	@echo "üì¶ Packaging with:"
	@echo "    AIE_LIB  = $(AIE_LIB)"
	@echo "    XSA      = $(XSA)"
	@echo "    EXEC     = $(EXEC)"
	@echo "Packaging design created in $(PKG_DIR) as $@"
	v++ --package $(PKG_FLAGS) $(PKG_COMMON) \
		$(AIE_LIB) $(XSA) -o $@
	@echo "‚úÖ Packaged design created in $(PKG_DIR)"

$(PKG_DIR):
	@mkdir -p $@

##############################  Run helper  ################################
run: package
ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),X86)
	@echo "‚ñ∂ Running SW-emulation on x86 ‚Ä¶"
	XCL_EMULATION_MODE=sw_emu $(EXEC)
  else
	@echo "‚ñ∂ Running SW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_sw_emu.sh -run-app $(EXEC)
  endif
else ifeq ($(TARGET),hw_emu)
	@echo "‚ñ∂ Running HW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_hw_emu.sh -run-app $(EXEC)
else
	@echo "‚ñ∂ Copy '$(PKG_DIR)' to SD-card and boot the VEK280."
endif

print_vars:
	@echo "TARGET   = $(TARGET)"
	@echo "AIE_TARGET = $(AIE_TARGET)"
	@echo "AIE_LIB  = $(AIE_LIB)"
	@echo "XO_FILES = $(XO_FILES)"
	@echo "XSA      = $(XSA)"
	@echo "EXEC     = $(EXEC)"

############################  Argument check  ##############################
check_args:
ifeq ($(TARGET),$(filter $(TARGET),hw_emu hw))
  ifeq ($(EMU_PS),X86)
    $(error ‚ùå For hw_emu and hw, EMU_PS must be QEMU)
  endif
endif
	@true

################################  Clean  ###################################
clean:
	rm -rf $(PKG_DIR) build_* *.xclbin *.xsa *.log

clean_all:
	$(MAKE) -C aieml    clean TARGET=$(AIE_TARGET)
	$(MAKE) -C pl       clean TARGET=$(TARGET)
	$(MAKE) -C host     clean TARGET=$(TARGET)
	$(MAKE) -C hw_link  clean TARGET=$(TARGET)
	rm -rf package.* build_* *.xclbin *.xsa *.log

	help:
	@echo "Usage:"
	@echo "  make aie TARGET=x86            # Build AIE graph for x86sim"
	@echo "  make aie TARGET=hw             # Build AIE graph for hardware model"
	@echo "  make sim TARGET=x86            # Run AIE x86 simulation"
	@echo "  make sim TARGET=hw             # Run AIE cycle-accurate sim"
	@echo "  make all TARGET=sw_emu EMU_PS=QEMU  # Full flow (placeholders for pl/host)"
	@echo "  make package TARGET=hw              # Package (requires pl/host/xsa)"
	@echo "  make run TARGET=sw_emu EMU_PS=X86   # Run packaged design"
############################################################################
