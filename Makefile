############################################################################
#  project_root/Makefile  ‚îÄ  umbrella build for AIE / PL / HOST / HW_LINK
# TARGET = sw_emu | hw_emu | hw
# EMU_PS = X86 | QEMU
############################################################################

######################## ‚ñ∂ User-specific paths ‚óÄ ###########################
XILINX_VITIS   ?= /tools/Xilinx/Vitis/2024.2
EDGE_COMMON_SW ?= /home/synthara/versal_common/xilinx-versal-common-v2024.2
IMAGE          ?= $(EDGE_COMMON_SW)/Image
ROOTFS         ?= $(EDGE_COMMON_SW)/rootfs.ext4
###########################################################################

##################### Build-time variables / defaults ######################
TARGET    ?= hw_emu
EMU_PS    ?= QEMU
PLATFORM  ?= xilinx_vek280_base_202420_1
PACK_CFG  := ./pack.cfg
LINK_CFG  := ./common/linker.cfg
###########################################################################

######################  Artefacts generated by sub-trees  ##################
XO_DIR    := pl/ip
AIE_DIR   := aieml

# NOTE: XO_FILES is only for printing; don't use it as a hard prereq (wildcard race)
XO_FILES  := $(wildcard $(XO_DIR)/*.xo)
AIE_LIB   := $(AIE_DIR)/libadf.a

XSA       := design_$(TARGET).xsa
EXEC      := host/system_host
EXEC      := ./post_boot.sh
PKG_DIR   := package.$(TARGET)
XCLBIN    := $(PKG_DIR)/system_$(TARGET).xclbin
###########################################################################

SUBOPTS := TARGET=$(TARGET) EMU_PS=$(EMU_PS) PLATFORM=$(PLATFORM)

############################################################################
#  Top-level targets
############################################################################
.PHONY: all aieml pl host link package run clean clean_all help print_vars check_args
all: check_args aieml pl host package

aieml: ; $(MAKE) -C $(AIE_DIR) 
pl:    ; $(MAKE) -C pl         $(SUBOPTS)
host:  ; $(MAKE) -C host       $(SUBOPTS)

########################  v++ --package flags ##############################
PKG_COMMON = --platform $(PLATFORM) --package.out_dir $(PKG_DIR) \
             --package.defer_aie_run --package.sd_file $(EXEC)

ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),X86)
    PKG_FLAGS = -t sw_emu
  else
    PKG_FLAGS = -t sw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
  endif
else ifeq ($(TARGET),hw_emu)
  PKG_FLAGS = -t hw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
else
  PKG_FLAGS = -t hw \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --package.boot_mode sd \
      --config $(PACK_CFG)
endif

##############################  Link  ######################################
# Create the platform XSA (system link). Ensure PL .xo and AIE lib exist first.
link: $(XSA)

$(XSA): | aieml pl
	@echo "üîó Linking with:"
	@echo "    XO_FILES  = $(XO_FILES)"
	@echo "    AIE_LIB   = $(AIE_LIB)"
	@echo "    LINK_CFG  = $(LINK_CFG)"
	v++ --link -t $(TARGET) --platform $(PLATFORM) --config $(LINK_CFG) \
		$(XO_DIR)/*.xo $(AIE_LIB) -o $@
	@echo "‚úÖ Linked design: $@"

##############################  Package  ###################################
package: $(XCLBIN)

$(XCLBIN): link host | $(PKG_DIR)
	@echo "üì¶ Packaging with:"
	@echo "    AIE_LIB  = $(AIE_LIB)"
	@echo "    XSA      = $(XSA)"
	@echo "    EXEC     = $(EXEC)"
	@echo "Packaging design into $(PKG_DIR) as $@"
	v++ --package $(PKG_FLAGS) $(PKG_COMMON) \
		$(AIE_LIB) $(XSA) -o $@
	@echo "‚úÖ Packaged design created in $(PKG_DIR)"

$(PKG_DIR):
	@mkdir -p $@

##############################  Run helper  ################################
run: package
ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),X86)
	@echo "‚ñ∂ Running SW-emulation on x86 ‚Ä¶"
	XCL_EMULATION_MODE=sw_emu $(EXEC)
  else
	@echo "‚ñ∂ Running SW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_sw_emu.sh -run-app $(EXEC)
  endif
else ifeq ($(TARGET),hw_emu)
	@echo "‚ñ∂ Running HW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_hw_emu.sh -run-app $(EXEC)
else
	@echo "‚ñ∂ Copy '$(PKG_DIR)' to SD-card and boot the VEK280."
endif

print_vars:
	@echo "TARGET    = $(TARGET)"
	@echo "EMU_PS    = $(EMU_PS)"
	@echo "PLATFORM  = $(PLATFORM)"
	@echo "LINK_CFG  = $(LINK_CFG)"
	@echo "PACK_CFG  = $(PACK_CFG)"
	@echo "AIE_LIB   = $(AIE_LIB)"
	@echo "XO_DIR    = $(XO_DIR)"
	@echo "XO_FILES  = $(XO_FILES)"
	@echo "XSA       = $(XSA)"
	@echo "EXEC      = $(EXEC)"
	@echo "PKG_DIR   = $(PKG_DIR)"
	@echo "XCLBIN    = $(XCLBIN)"

############################  Argument check  ##############################
check_args:
ifeq ($(TARGET),$(filter $(TARGET),hw_emu hw))
  ifeq ($(EMU_PS),X86)
    $(error ‚ùå For hw_emu and hw, EMU_PS must be QEMU)
  endif
endif
	@true

################################  Clean  ###################################
clean:
	rm -rf $(PKG_DIR) build_* *.xclbin *.xsa *.log

clean_all:
	$(MAKE) -C $(AIE_DIR) clean TARGET=$(TARGET) || true
	$(MAKE) -C pl       clean TARGET=$(TARGET) || true
	$(MAKE) -C host     clean TARGET=$(TARGET) || true
	$(MAKE) -C hw_link  clean TARGET=$(TARGET) || true
	rm -rf package.* build_* *.xclbin *.xsa *.log

help:
	@echo "Usage:"
	@echo "  make all TARGET=sw_emu EMU_PS=QEMU"
	@echo "  make link TARGET=hw_emu"
	@echo "  make package TARGET=hw"
	@echo "  make run TARGET=sw_emu EMU_PS=X86"
############################################################################