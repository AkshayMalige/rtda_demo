############################################################################
#  project_root/Makefile  ‚îÄ  umbrella build for AIE / PL / HOST / HW_LINK
# TARGET = sw_emu | hw_emu | hw
# EMU_PS = x86sim | QEMU
############################################################################

######################## ‚ñ∂ User-specific paths ‚óÄ ###########################
XILINX_VITIS   ?= /tools/Xilinx/Vitis/2024.2
EDGE_COMMON_SW ?= /home/synthara/versal_common/xilinx-versal-common-v2024.2
IMAGE          ?= $(EDGE_COMMON_SW)/Image
ROOTFS         ?= $(EDGE_COMMON_SW)/rootfs.ext4
###########################################################################

##################### Build-time variables / defaults ######################
TARGET    ?= hw_emu
# sw_emu | hw_emu | hw
EMU_PS    ?= QEMU
# x86sim | QEMU
PLATFORM  ?= /tools/Xilinx/Vitis/2024.2/base_platforms/xilinx_vek280_base_202420_1/xilinx_vek280_base_202420_1.xpfm
PACK_CFG  := ./pack.cfg

# Select which AI Engine-ML graph to build
# Valid options: aieml | aieml2 | aieml3
GRAPH    ?= aieml3

LINK_CFG  := ./common/linker_$(GRAPH).cfg
# Location for generated input and output files. Default to a directory one
# level above the project to keep the repository tree clean.
DATA_DIR  ?= $(abspath ./data)

ifeq ($(GRAPH),aieml3)
  HLS_KERNELS := leaky_relu s2mm
else
  HLS_KERNELS := leaky_relu leaky_splitter roll_concat s2mm
endif

POST_BOOT := post_boot.sh
###########################################################################

######################  Artefacts generated by sub-trees  ##################
XO_DIR    := pl/ip
AIE_DIR   := $(GRAPH)

AIE_LIB   := $(AIE_DIR)/libadf.a
PL_XOS    := $(addprefix $(XO_DIR)/,$(addsuffix _hls.xo,$(HLS_KERNELS)))

XSA       := design_$(GRAPH)_$(TARGET).xsa
EXEC      := host/system_host
PKG_DIR   := package.$(GRAPH).$(TARGET)
XCLBIN    := $(PKG_DIR)/system_$(TARGET).xclbin
###########################################################################

# Map EMU_PS to AIE compiler target
ifeq ($(EMU_PS),x86sim)
  AIE_TGT := x86sim
else
  AIE_TGT := hw
endif

SUBOPTS := TARGET=$(TARGET) EMU_PS=$(EMU_PS) PLATFORM=$(PLATFORM) DATA_DIR=$(DATA_DIR) GRAPH=$(GRAPH)

############################################################################
#  Top-level targets
############################################################################
.PHONY: all aie pl host link package run clean clean_all help print_vars check_args $(POST_BOOT) aieml aieml2 aieml3
all: check_args package

aie: $(AIE_LIB)
pl: $(PL_XOS)
host:
	$(MAKE) -C host $(SUBOPTS)

.PHONY: aieml aieml2 aieml3
aieml aieml2 aieml3: GRAPH=$@
aieml aieml2 aieml3: all

$(AIE_LIB):
	$(MAKE) -C $(AIE_DIR) TARGET=$(AIE_TGT) PLATFORM=$(PLATFORM) DATA_DIR=$(DATA_DIR)

$(PL_XOS):
	$(MAKE) -C pl TARGET=$(TARGET) DATA_DIR=$(DATA_DIR) KERNELS="$(HLS_KERNELS)"

########################  v++ --package flags ##############################
PKG_COMMON = --platform $(PLATFORM) --package.out_dir $(PKG_DIR) \
     --package.defer_aie_run --package.sd_file $(EXEC) \
     --package.sd_file $(POST_BOOT) --package.sd_dir $(DATA_DIR)

ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),x86sim)
    PKG_FLAGS = -t sw_emu
  else
    PKG_FLAGS = -t sw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
  endif
else ifeq ($(TARGET),hw_emu)
  PKG_FLAGS = -t hw_emu \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --config $(PACK_CFG)
else
  PKG_FLAGS = -t hw \
      --package.rootfs $(ROOTFS) \
      --package.kernel_image $(IMAGE) \
      --package.boot_mode sd \
      --config $(PACK_CFG)
endif

##############################  Link  ######################################
# Create the platform XSA (system link). Ensure PL .xo and AIE lib exist first.
link: $(XSA)

$(XSA): $(AIE_LIB) $(PL_XOS) $(LINK_CFG)
	@echo "üîó Linking with:"
	@echo "    PL_XOS   = $(PL_XOS)"
	@echo "    AIE_LIB  = $(AIE_LIB)"
	@echo "    LINK_CFG = $(LINK_CFG)"
	v++ --link -t $(TARGET) --platform $(PLATFORM) --config $(LINK_CFG) \
		$(PL_XOS) $(AIE_LIB) -o $@
	@echo "‚úÖ Linked design: $@"

########################### post_boot.sh ###################################
# Always (re)generate the launcher script at project root before packaging.
# Marked as .PHONY so it reflects the current TARGET value each time.
$(POST_BOOT):
	@echo "üìù Generating $@ for TARGET=$(TARGET) GRAPH=$(GRAPH)"
	@{ \
	  echo '#!/bin/bash'; \
	  echo 'export XILINX_XRT=/usr'; \
	  echo './system_host system_$(TARGET).xclbin --graph=$(GRAPH)'; \
	} > $@
	@chmod +x $@

##############################  Package  ###################################
package: $(XCLBIN)

$(XCLBIN): link host $(POST_BOOT) | $(PKG_DIR)
	@echo "üì¶ Packaging with:"
	@echo "    AIE_LIB  = $(AIE_LIB)"
	@echo "    XSA      = $(XSA)"
	@echo "    EXEC     = $(EXEC)"
	@echo "Packaging design into $(PKG_DIR) as $@"
	v++ --package $(PKG_FLAGS) $(PKG_COMMON) \
		$(AIE_LIB) $(XSA) -o $@
	@echo "‚úÖ Packaged design created in $(PKG_DIR)"

$(PKG_DIR):
	@mkdir -p $@

##############################  Run helper  ################################
run: package
ifeq ($(TARGET),sw_emu)
  ifeq ($(EMU_PS),x86sim)
	@echo "‚ñ∂ Running SW-emulation on x86sim ‚Ä¶"
	XCL_EMULATION_MODE=sw_emu $(POST_BOOT)
  else
	@echo "‚ñ∂ Running SW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_sw_emu.sh -run-app $(POST_BOOT)
  endif
else ifeq ($(TARGET),hw_emu)
	@echo "‚ñ∂ Running HW-emulation on QEMU ‚Ä¶"
	$(PKG_DIR)/launch_hw_emu.sh -run-app $(POST_BOOT)
else
	@echo "‚ñ∂ Copy '$(PKG_DIR)' to SD-card and boot the VEK280."
endif

print_vars:
	@echo "TARGET    = $(TARGET)"
	@echo "EMU_PS    = $(EMU_PS)"
	@echo "GRAPH     = $(GRAPH)"
	@echo "AIE_TGT   = $(AIE_TGT)"
	@echo "PLATFORM  = $(PLATFORM)"
	@echo "LINK_CFG  = $(LINK_CFG)"
	@echo "PACK_CFG  = $(PACK_CFG)"
	@echo "AIE_DIR   = $(AIE_DIR)"
	@echo "AIE_LIB   = $(AIE_LIB)"
	@echo "XO_DIR    = $(XO_DIR)"
	@echo "PL_XOS    = $(PL_XOS)"
	@echo "XSA       = $(XSA)"
	@echo "EXEC      = $(EXEC)"
	@echo "POST_BOOT = $(POST_BOOT)"
	@echo "DATA_DIR  = $(DATA_DIR)"
	@echo "PKG_DIR   = $(PKG_DIR)"
	@echo "XCLBIN    = $(XCLBIN)"

############################  Argument check  ##############################
check_args:
ifeq ($(TARGET),$(filter $(TARGET),hw_emu hw))
  ifeq ($(EMU_PS),x86sim)
    $(error ‚ùå For hw_emu and hw, EMU_PS must be QEMU)
  endif
endif
	@true

################################  Clean  ###################################
clean:
	rm -rf $(PKG_DIR) build_* *.xclbin *.xsa *.log *.link_summary _x .Xil _ide $(POST_BOOT)

clean_all:
	$(MAKE) -C $(AIE_DIR) clean TARGET=$(AIE_TGT) || true
	$(MAKE) -C pl       clean TARGET=$(TARGET) || true
	$(MAKE) -C host     clean TARGET=$(TARGET) || true
	$(MAKE) -C hw_link  clean TARGET=$(TARGET) || true
	rm -rf package.* build_* *.xclbin *.xsa *.log

help:
	@echo "Usage:"
	@echo "  make all TARGET=sw_emu EMU_PS=QEMU"
	@echo "  make link TARGET=hw_emu"
	@echo "  make package TARGET=hw"
	@echo "  make run TARGET=sw_emu EMU_PS=x86sim"
############################################################################