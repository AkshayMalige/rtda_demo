#pragma once

constexpr int INPUT_SIZE = 8;
constexpr int HIDDEN_SIZE = 128;
constexpr int OUTPUT_SIZE = 128;
constexpr float LEAKY_SLOPE = 0.1f;
constexpr int CASCADE_LENGTH = 2;
constexpr int ROLL_CONC_SUBSET_SIZE = 6;


constexpr int EMBED_DENSE0_INPUT_SIZE = INPUT_SIZE;
constexpr int EMBED_DENSE0_WEIGHTS_SIZE = HIDDEN_SIZE * INPUT_SIZE;
constexpr int EMBED_DENSE0_BIAS_SIZE = HIDDEN_SIZE;
constexpr int EMBED_DENSE1_WEIGHTS_PART_SIZE = OUTPUT_SIZE * HIDDEN_SIZE / CASCADE_LENGTH;
constexpr int EMBED_DENSE1_BIAS_SIZE = OUTPUT_SIZE;
constexpr int EMBED_FINAL_OUTPUT_SIZE = OUTPUT_SIZE;
constexpr int EMBED_DENSE2_INPUT_SIZE = 768;
constexpr int EMBED_DENSE2_WEIGHTS_PARTS = 6;
constexpr int EMBED_DENSE2_WEIGHTS_PART_SIZE =
    OUTPUT_SIZE * (EMBED_DENSE2_INPUT_SIZE / EMBED_DENSE2_WEIGHTS_PARTS);

// SUBSOLVER0 graph sizes ---------------------------------------------------
constexpr int SUBSOLVER0_INPUT_SIZE = 768;
constexpr int SUBSOLVER0_INPUT_PARTS = 12;
constexpr int SUBSOLVER0_INPUT_PART_SIZE = SUBSOLVER0_INPUT_SIZE / SUBSOLVER0_INPUT_PARTS;
constexpr int SUBSOLVER0_DENSE0_INPUT_SIZE = SUBSOLVER0_INPUT_SIZE;
constexpr int SUBSOLVER0_DENSE0_WEIGHTS_SIZE = HIDDEN_SIZE * SUBSOLVER0_DENSE0_INPUT_SIZE;
constexpr int SUBSOLVER0_DENSE0_WEIGHTS_PART_SIZE = HIDDEN_SIZE * SUBSOLVER0_INPUT_PART_SIZE;
constexpr int SUBSOLVER0_DENSE0_BIAS_SIZE = HIDDEN_SIZE;
constexpr int SUBSOLVER0_LAYER_WEIGHTS_PARTS = 2;
constexpr int SUBSOLVER0_LAYER_WEIGHTS_PART_SIZE = OUTPUT_SIZE * (HIDDEN_SIZE / SUBSOLVER0_LAYER_WEIGHTS_PARTS);
constexpr int SUBSOLVER0_LAYER_BIAS_SIZE = OUTPUT_SIZE;
constexpr int SUBSOLVER0_DENSE1_WEIGHTS_SIZE = HIDDEN_SIZE * HIDDEN_SIZE;
constexpr int SUBSOLVER0_DENSE1_WEIGHTS_PART_SIZE = SUBSOLVER0_LAYER_WEIGHTS_PART_SIZE;
constexpr int SUBSOLVER0_DENSE1_BIAS_SIZE = SUBSOLVER0_LAYER_BIAS_SIZE;
constexpr int SUBSOLVER0_DENSE2_WEIGHTS_SIZE = HIDDEN_SIZE * HIDDEN_SIZE;
constexpr int SUBSOLVER0_DENSE2_WEIGHTS_PART_SIZE = SUBSOLVER0_LAYER_WEIGHTS_PART_SIZE;
constexpr int SUBSOLVER0_DENSE2_BIAS_SIZE = SUBSOLVER0_LAYER_BIAS_SIZE;
constexpr int SUBSOLVER0_DENSE3_WEIGHTS_SIZE = HIDDEN_SIZE * HIDDEN_SIZE;
constexpr int SUBSOLVER0_DENSE3_WEIGHTS_PART_SIZE = SUBSOLVER0_LAYER_WEIGHTS_PART_SIZE;
constexpr int SUBSOLVER0_DENSE3_BIAS_SIZE = SUBSOLVER0_LAYER_BIAS_SIZE;
constexpr int SUBSOLVER0_DENSE_TOTAL_WEIGHTS_SIZE = SUBSOLVER0_DENSE0_WEIGHTS_SIZE +
                                                   SUBSOLVER0_DENSE1_WEIGHTS_SIZE +
                                                   SUBSOLVER0_DENSE2_WEIGHTS_SIZE +
                                                   SUBSOLVER0_DENSE3_WEIGHTS_SIZE;
constexpr int SUBSOLVER0_DENSE_TOTAL_WEIGHT_TILES = SUBSOLVER0_INPUT_PARTS +
                                                    3 * SUBSOLVER0_LAYER_WEIGHTS_PARTS;
constexpr int SUBSOLVER0_DENSE_REMAINING_WEIGHTS_SIZE =
    SUBSOLVER0_DENSE_TOTAL_WEIGHTS_SIZE - SUBSOLVER0_DENSE0_WEIGHTS_SIZE;
constexpr int SUBSOLVER0_DENSE_REMAINING_WEIGHT_TILES =
    SUBSOLVER0_DENSE_TOTAL_WEIGHT_TILES - SUBSOLVER0_INPUT_PARTS;
constexpr int SUBSOLVER0_FINAL_OUTPUT_SIZE = OUTPUT_SIZE;

// OUTPUT graph sizes -------------------------------------------------------
constexpr int OUTPUT_DENSE0_INPUT_SIZE = HIDDEN_SIZE;
constexpr int OUTPUT_DENSE0_OUT_PAD = 32;
constexpr int OUTPUT_DENSE0_WEIGHTS_SIZE = OUTPUT_DENSE0_OUT_PAD * HIDDEN_SIZE;
constexpr int OUTPUT_DENSE0_BIAS_SIZE = 32;
constexpr int OUTPUT_FINAL_OUTPUT_SIZE = 32;
